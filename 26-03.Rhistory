#library(ggpubr)
#library(scales)
#3library(tidyverse)
#library(gdata)
library(ComplexHeatmap)
library(circlize)
rna_seq_files <- list.files(path = "D:/didic/Documents/Documentos/Master UOC/Cuatri 2/TFM/HTseq_expression_hg38",
pattern = "\\.tsv$", full.names = TRUE)
# Leer y combinar los archivos RNA-seq
rna_seq_list <- lapply(rna_seq_files, function(file) {
df <- fread(file, header = FALSE, stringsAsFactors = FALSE)  # Usar fread para mayor eficiencia
df$Sample <- basename(file)
return(df)
})
rna_seq_data <- bind_rows(rna_seq_list)
colnames(rna_seq_data) <- c("gene_id", "gene_name", "Expression", "Sample")
rna_seq_data <- rna_seq_data %>%
mutate(gene_id = str_remove(gene_id, "\\..*"))
rna_seq_filtered <- rna_seq_data %>%
filter((Expression > 0)) %>%
ungroup()
# Cargar el archivo sin encabezado
gene_lengths <- fread("D:/didic/Documents/Documentos/Master UOC/Cuatri 2/TFM/Databases/featureLengths_hg38.tsv",
header = FALSE, sep = "\t")
# Renombrar columnas
colnames(gene_lengths) <- c("gene_id", "gene_length", "Col3", "Col4", "Col5", "hgnc_id")
# Limpiar la columna 'gene_id'
gene_lengths$gene_id <- gsub('gene_id "', "", gene_lengths$gene_id)
gene_lengths <- gene_lengths %>%
mutate(gene_id = str_remove(gene_id, "\\..*")) %>%
select(gene_id, gene_length)
# Unir la expresión con la longitud de los genes
rna_expression_all <- rna_seq_filtered %>%
left_join(gene_lengths, by = "gene_id")
# Añadir los datos clinicos
clinical_data <- fread("D:/didic/Documents/Documentos/Master UOC/Cuatri 2/TFM/20250228_DDBB_clinicos_RENAL_summarized.txt",
sep = "\t", header = TRUE)
rna_expression_all$Sample <- gsub("htseq-", "", rna_expression_all$Sample)
rna_expression_all$Sample <- gsub(".tsv", "", rna_expression_all$Sample)
merged_rna_clinical <- rna_expression_all %>%
left_join(clinical_data, by = c("Sample" = "RNA_FFPE_sampleName"))
rm(list = setdiff(ls(), "merged_rna_clinical"))
View(merged_rna_clinical)
num_samples <- merged_rna_clinical %>%
distinct(sample_ID) %>%
nrow()
print(num_samples)
# Convertir a formato ancho (cada fila es un paciente, cada columna un gen)
expression_matrix <- dcast(merged_rna_clinical, sample_ID ~ gene_name, value.var = "Expression", fun.aggregate = mean)
View(expression_matrix)
# Convertir a data.frame para mejor manejo
expression_matrix <- as.data.frame(expression_matrix)
# Usar la columna Sample como nombres de fila
rownames(expression_matrix) <- expression_matrix$sample_ID
# Eliminar la columna Sample (ya está en los nombres de fila)
expression_matrix$sample_ID <- NULL
# Reemplazar los valores NA por 0
expression_matrix[is.na(expression_matrix)] <- 0
View(expression_matrix)
# Reemplazar los valores NA por 0
expression_matrix[is.na(expression_matrix)] <- 0
# Aplicar PCA (sin normalización)
pca <- prcomp(expression_matrix, scale. = FALSE)
rna_seq_files <- list.files(path = "D:/didic/Documents/Documentos/Master UOC/Cuatri 2/TFM/HTseq_expression_hg38",
pattern = "\\.tsv$", full.names = TRUE)
# Leer y combinar los archivos RNA-seq
rna_seq_list <- lapply(rna_seq_files, function(file) {
df <- fread(file, header = FALSE, stringsAsFactors = FALSE)  # Usar fread para mayor eficiencia
df$Sample <- basename(file)
return(df)
})
rna_seq_data <- bind_rows(rna_seq_list)
colnames(rna_seq_data) <- c("gene_id", "gene_name", "Expression", "Sample")
rna_seq_data <- rna_seq_data %>%
mutate(gene_id = str_remove(gene_id, "\\..*"))
rna_seq_filtered <- rna_seq_data %>%
filter((Expression > 0)) %>%
ungroup()
# Cargar el archivo sin encabezado
gene_lengths <- fread("D:/didic/Documents/Documentos/Master UOC/Cuatri 2/TFM/Databases/featureLengths_hg38.tsv",
header = FALSE, sep = "\t")
# Renombrar columnas
colnames(gene_lengths) <- c("gene_id", "gene_length", "Col3", "Col4", "Col5", "hgnc_id")
# Limpiar la columna 'gene_id'
gene_lengths$gene_id <- gsub('gene_id "', "", gene_lengths$gene_id)
gene_lengths <- gene_lengths %>%
mutate(gene_id = str_remove(gene_id, "\\..*")) %>%
select(gene_id, gene_length)
# Unir la expresión con la longitud de los genes
rna_expression_all <- rna_seq_filtered %>%
left_join(gene_lengths, by = "gene_id")
# Añadir los datos clinicos
clinical_data <- fread("D:/didic/Documents/Documentos/Master UOC/Cuatri 2/TFM/20250228_DDBB_clinicos_RENAL_summarized.txt",
sep = "\t", header = TRUE)
rna_expression_all$Sample <- gsub("htseq-", "", rna_expression_all$Sample)
rna_expression_all$Sample <- gsub(".tsv", "", rna_expression_all$Sample)
merged_rna_clinical <- rna_expression_all %>%
left_join(clinical_data, by = c("Sample" = "RNA_FFPE_sampleName"))
View(rna_expression_all)
# Convertir a formato ancho (cada fila es un paciente, cada columna un gen)
expression_matrix <- dcast(rna_expression_all, sample_ID ~ gene_name, value.var = "Expression", fun.aggregate = mean)
View(rna_expression_all)
# Convertir a formato ancho (cada fila es un paciente, cada columna un gen)
expression_matrix <- dcast(merged_rna_clinical, sample_ID ~ gene_name, value.var = "Expression", fun.aggregate = mean)
# Convertir a data.frame para mejor manejo
expression_matrix <- as.data.frame(expression_matrix)
# Usar la columna Sample como nombres de fila
rownames(expression_matrix) <- expression_matrix$sample_ID
# Eliminar la columna Sample (ya está en los nombres de fila)
expression_matrix$sample_ID <- NULL
# Reemplazar los valores NA por 0
expression_matrix[is.na(expression_matrix)] <- 0
View(expression_matrix)
View(expression_matrix)
# Aplicar PCA (sin normalización)
pca <- prcomp(expression_matrix, scale. = FALSE)
# Calcular la varianza explicada por cada componente principal
pca.var.per <- round(100 * pca$sdev^2 / sum(pca$sdev^2), 1)
# Extraer los primeros dos componentes principales para graficar
pca.data <- data.frame(sample_ID = rownames(pca$x),
X = pca$x[, 1],
Y = pca$x[, 2])
# Añadir la variable de respuesta (responder o no responder) para usarla en el gráfico
pca.data$response_type <- merged_rna_clinical$response_TAC1[match(pca.data$sample_ID, merged_rna_clinical$sample_ID)]
# Graficar los dos primeros componentes principales con solo los sample_ID
ggplot(data = pca.data, aes(x = X, y = Y, label = sample_ID, color = response_type)) +
geom_text(aes(label = sample_ID), size = 3, check_overlap = TRUE) +  # Solo las etiquetas de los puntos (sample_ID)
scale_color_manual(values = c("responder" = "#32CD32", "non_responder" = "#FF6347")) +  # Colores personalizados para responder vs no_responder
xlab(paste("PC1 - ", pca.var.per[1], "%", sep = "")) +
ylab(paste("PC2 - ", pca.var.per[2], "%", sep = "")) +
theme_minimal() +  # Tema minimalista
theme(
plot.title = element_text(hjust = 0.5, size = 16, face = "bold"),
axis.title = element_text(size = 12),  # Tamaño de las etiquetas de los ejes
axis.text = element_text(size = 10),   # Tamaño de los textos de los ejes
legend.title = element_text(size = 10),  # Tamaño del título de la leyenda
legend.text = element_text(size = 8)  # Tamaño de los textos de la leyenda
) +
ggtitle("PCA Genic Expression by Response Type")  # Título del gráfico
# Graficar los dos primeros componentes principales con solo los sample_ID
ggplot(data = pca.data, aes(x = X, y = Y, label = sample_ID, color = response_type)) +
geom_text(aes(label = sample_ID), size = 3, check_overlap = F) +  # Solo las etiquetas de los puntos (sample_ID)
scale_color_manual(values = c("responder" = "#32CD32", "non_responder" = "#FF6347")) +
xlab(paste("PC1 - ", pca.var.per[1], "%", sep = "")) +
ylab(paste("PC2 - ", pca.var.per[2], "%", sep = "")) +
theme_minimal() +  # Tema minimalista
theme(
plot.title = element_text(hjust = 0.5, size = 16, face = "bold"),
axis.title = element_text(size = 12),
axis.text = element_text(size = 10),
legend.title = element_text(size = 10),
legend.text = element_text(size = 8)
) +
ggtitle("PCA Genic Expression by Response Type")
# Graficar los dos primeros componentes principales con solo los sample_ID
ggplot(data = pca.data, aes(x = X, y = Y, color = response_type, label = sample_ID)) +
geom_point(size = 3, alpha = 0.8) +  # Colored points for each sample
geom_text(aes(label = sample_ID), size = 3, vjust = -1, hjust = 0.5) +  # Labels above points
scale_color_manual(values = c("responder" = "#32CD32", "non_responder" = "#FF6347")) +
xlab(paste("PC1 - ", pca.var.per[1], "%", sep = "")) +
ylab(paste("PC2 - ", pca.var.per[2], "%", sep = "")) +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, size = 16, face = "bold"),
axis.title = element_text(size = 12),
axis.text = element_text(size = 10),
legend.title = element_text(size = 12, face = "bold"),
legend.text = element_text(size = 10)
) +
ggtitle("PCA Genic Expression by Response Type") +
# Separate legend into responders & non-responders
guides(color = guide_legend(
title = "Response Type",
override.aes = list(size = 4)  # Larger points in legend
))
# Graficar los dos primeros componentes principales con solo los sample_ID
ggplot(data = pca.data, aes(x = X, y = Y, label = sample_ID, color = response_type)) +
geom_text(aes(label = sample_ID), size = 3, check_overlap = F) +  # Solo las etiquetas de los puntos (sample_ID)
scale_color_manual(values = c("responder" = "#32CD32", "non_responder" = "#FF6347")) +
xlab(paste("PC1 - ", pca.var.per[1], "%", sep = "")) +
ylab(paste("PC2 - ", pca.var.per[2], "%", sep = "")) +
theme_minimal() +  # Tema minimalista
theme(
plot.title = element_text(hjust = 0.5, size = 16, face = "bold"),
axis.title = element_text(size = 12),
axis.text = element_text(size = 10),
legend.title = element_text(size = 10),
legend.text = element_text(size = 8)
) +
ggtitle("PCA Genic Expression by Response Type")
# Graficar los dos primeros componentes principales con solo los sample_ID
ggplot(data = pca.data, aes(x = X, y = Y, label = sample_ID, color = response_type)) +
geom_text(aes(label = sample_ID), size = 3, check_overlap = F) +  # Solo las etiquetas de los puntos (sample_ID)
scale_color_manual(values = c("responder" = "#32CD32", "non_responder" = "#FF6347")) +
xlab(paste("PC1 - ", pca.var.per[1], "%", sep = "")) +
ylab(paste("PC2 - ", pca.var.per[2], "%", sep = "")) +
theme_minimal() +  # Tema minimalista
theme(
plot.title = element_text(hjust = 0.5, size = 16, face = "bold"),
axis.title = element_text(size = 12),
axis.text = element_text(size = 10),
legend.title = element_text(size = 10),
legend.text = element_text(size = 8)
) +
ggtitle("PCA of Raw Genic Expression")
# Convertir a formato ancho (cada fila es un paciente, cada columna un gen)
expression_matrix <- dcast(rna_m6a_expression, sample_ID ~ gene_name, value.var = "TPM", fun.aggregate = mean)
# **Calcular Total_reads antes de calcular FPKM**
total_reads_per_sample <- merged_rna_clinical %>%
group_by(Sample) %>%
summarise(Total_reads = sum(Expression, na.rm = TRUE))
# Unir Total_reads al dataframe principal
merged_rna_clinical <- merged_rna_clinical %>%
left_join(total_reads_per_sample, by = "Sample")
# **Calcular FPKM**
merged_rna_clinical <- merged_rna_clinical %>%
mutate(FPKM = (Expression / gene_length) / (Total_reads / 1e6)) %>%
mutate(FPKM = replace_na(FPKM, 0))  # Evitar NA en FPKM
# **Calcular TPM**
sum_FPKM_per_sample <- merged_rna_clinical %>%
group_by(Sample) %>%
summarise(Sum_FPKM = sum(FPKM, na.rm = TRUE))  # Evitar NA en la suma
# Unir Sum_FPKM al dataframe principal
merged_rna_clinical <- merged_rna_clinical %>%
left_join(sum_FPKM_per_sample, by = "Sample") %>%
mutate(TPM = (FPKM / Sum_FPKM) * 1e6) %>%
mutate(TPM = replace_na(TPM, 0))  # Evitar NA en TPM
# **Seleccionar genes de la maquinaria m6A**
epitranscriptomic_genes <- fread("D:/didic/Documents/Documentos/Master UOC/Cuatri 2/TFM/epitranscriptomic_regulators_annotated.txt",
sep = "\t", header = TRUE)
m6A_genes <- epitranscriptomic_genes %>%
filter(Mark == "m6A") %>%
pull(Gene_symbol)
# **Filtrar la expresión de genes m6A**
rna_m6a_expression <- merged_rna_clinical %>%
filter(gene_name %in% m6A_genes)
# Convertir a formato ancho (cada fila es un paciente, cada columna un gen)
expression_matrix <- dcast(rna_m6a_expression, sample_ID ~ gene_name, value.var = "TPM", fun.aggregate = mean)
# Convertir a data.frame para mejor manejo
expression_matrix <- as.data.frame(expression_matrix)
# Usar la columna Sample como nombres de fila
rownames(expression_matrix) <- expression_matrix$sample_ID
# Eliminar la columna Sample (ya está en los nombres de fila)
expression_matrix$sample_ID <- NULL
# Reemplazar los valores NA por 0
expression_matrix[is.na(expression_matrix)] <- 0
# Aplicar PCA (sin normalización)
pca <- prcomp(expression_matrix, scale. = F)
# Calcular la varianza explicada por cada componente principal
pca.var.per <- round(100 * pca$sdev^2 / sum(pca$sdev^2), 1)
# Extraer los primeros dos componentes principales para graficar
pca.data <- data.frame(sample_ID = rownames(pca$x),
X = pca$x[, 1],
Y = pca$x[, 2])
# Añadir la variable de respuesta (responder o no responder) para usarla en el gráfico
pca.data$response_type <- rna_m6a_expression$response_TAC1[match(pca.data$sample_ID, rna_m6a_expression$sample_ID)]
# Graficar los dos primeros componentes principales con solo los sample_ID
ggplot(data = pca.data, aes(x = X, y = Y, label = sample_ID, color = response_type)) +
geom_text(aes(label = sample_ID), size = 3, check_overlap = F) +  # Solo las etiquetas de los puntos (sample_ID)
scale_color_manual(values = c("responder" = "#32CD32", "non_responder" = "#FF6347")) +  # Colores personalizados para responder vs no_responder
xlab(paste("PC1 - ", pca.var.per[1], "%", sep = "")) +
ylab(paste("PC2 - ", pca.var.per[2], "%", sep = "")) +
theme_minimal() +  # Tema minimalista
theme(
plot.title = element_text(hjust = 0.5, size = 16, face = "bold"),
axis.title = element_text(size = 12),  # Tamaño de las etiquetas de los ejes
axis.text = element_text(size = 10),   # Tamaño de los textos de los ejes
legend.title = element_text(size = 10),  # Tamaño del título de la leyenda
legend.text = element_text(size = 8)  # Tamaño de los textos de la leyenda
) +
ggtitle("PCA m6A machinery Genic Expression")  # Título del gráfico
# Convertir a formato ancho (cada fila es un paciente, cada columna un gen)
expression_matrix <- dcast(merged_rna_clinical, sample_ID ~ gene_name, value.var = "TPM", fun.aggregate = mean)
# Convertir a data.frame para mejor manejo
expression_matrix <- as.data.frame(expression_matrix)
# Usar la columna Sample como nombres de fila
rownames(expression_matrix) <- expression_matrix$sample_ID
# Eliminar la columna Sample (ya está en los nombres de fila)
expression_matrix$sample_ID <- NULL
# Reemplazar los valores NA por 0
expression_matrix[is.na(expression_matrix)] <- 0
# Aplicar PCA (sin normalización)
pca <- prcomp(expression_matrix, scale. = F)
# Calcular la varianza explicada por cada componente principal
pca.var.per <- round(100 * pca$sdev^2 / sum(pca$sdev^2), 1)
# Extraer los primeros dos componentes principales para graficar
pca.data <- data.frame(sample_ID = rownames(pca$x),
X = pca$x[, 1],
Y = pca$x[, 2])
# Añadir la variable de respuesta (responder o no responder) para usarla en el gráfico
pca.data$response_type <- merged_rna_clinical$response_TAC1[match(pca.data$sample_ID, merged_rna_clinical$sample_ID)]
# Graficar los dos primeros componentes principales con solo los sample_ID
ggplot(data = pca.data, aes(x = X, y = Y, label = sample_ID, color = response_type)) +
geom_text(aes(label = sample_ID), size = 3, check_overlap = TRUE) +  # Solo las etiquetas de los puntos (sample_ID)
scale_color_manual(values = c("responder" = "#32CD32", "non_responder" = "#FF6347")) +  # Colores personalizados para responder vs no_responder
xlab(paste("PC1 - ", pca.var.per[1], "%", sep = "")) +
ylab(paste("PC2 - ", pca.var.per[2], "%", sep = "")) +
theme_minimal() +  # Tema minimalista
theme(
plot.title = element_text(hjust = 0.5, size = 16, face = "bold"),
axis.title = element_text(size = 12),  # Tamaño de las etiquetas de los ejes
axis.text = element_text(size = 10),   # Tamaño de los textos de los ejes
legend.title = element_text(size = 10),  # Tamaño del título de la leyenda
legend.text = element_text(size = 8)  # Tamaño de los textos de la leyenda
) +
ggtitle("PCA normalized Genic Expression")  # Título del gráfico
# Graficar los dos primeros componentes principales con solo los sample_ID
ggplot(data = pca.data, aes(x = X, y = Y, label = sample_ID, color = response_type)) +
geom_text(aes(label = sample_ID), size = 3, check_overlap = TRUE) +  # Solo las etiquetas de los puntos (sample_ID)
scale_color_manual(values = c("responder" = "#32CD32", "non_responder" = "#FF6347")) +  # Colores personalizados para responder vs no_responder
xlab(paste("PC1 - ", pca.var.per[1], "%", sep = "")) +
ylab(paste("PC2 - ", pca.var.per[2], "%", sep = "")) +
theme_minimal() +  # Tema minimalista
theme(
plot.title = element_text(hjust = 0.5, size = 16, face = "bold"),
axis.title = element_text(size = 12),  # Tamaño de las etiquetas de los ejes
axis.text = element_text(size = 10),   # Tamaño de los textos de los ejes
legend.title = element_text(size = 10),  # Tamaño del título de la leyenda
l
# Graficar los dos primeros componentes principales con solo los sample_ID
ggplot(data = pca.data, aes(x = X, y = Y, label = sample_ID, color = response_type)) +
geom_text(aes(label = sample_ID), size = 3, check_overlap = F) +  # Solo las etiquetas de los puntos (sample_ID)
scale_color_manual(values = c("responder" = "#32CD32", "non_responder" = "#FF6347")) +  # Colores personalizados para responder vs no_responder
xlab(paste("PC1 - ", pca.var.per[1], "%", sep = "")) +
ylab(paste("PC2 - ", pca.var.per[2], "%", sep = "")) +
theme_minimal() +  # Tema minimalista
theme(
plot.title = element_text(hjust = 0.5, size = 16, face = "bold"),
axis.title = element_text(size = 12),
axis.text = element_text(size = 10),
legend.title = element_text(size = 10),
legend.text = element_text(size = 8)
) +
ggtitle("PCA normalized Genic Expression")  # Título del gráfico
library(ggplot2)
library(dplyr)
library(patchwork)  # For combining plots
# Define colors for responders and non-responders
response_colors <- c("responder" = "#32CD32", "non_responder" = "#FF6347")
# TPM Expression by Sample (Without Legend)
p1 <- ggplot(rna_m6a_expression, aes(x = Sample, y = TPM, fill = response_TAC1)) +
geom_boxplot(alpha = 0.7, outlier.shape = NA) +
geom_jitter(width = 0.2, alpha = 0.5) +
scale_y_log10() +
scale_fill_manual(values = response_colors) +
labs(title = "TPM Expression by Sample", y = "TPM (log10)", x = "Sample") +
theme_minimal() +
theme(axis.text.x = element_blank(),  # Remove x-axis labels for top plot
axis.ticks.x = element_blank(),
legend.position = "none")  # Hide legend in first plot
# FPKM Expression by Sample (With Legend)
p2 <- ggplot(rna_m6a_expression, aes(x = Sample, y = FPKM, fill = response_TAC1)) +
geom_boxplot(alpha = 0.7, outlier.shape = NA) +
geom_jitter(width = 0.2, alpha = 0.5) +
scale_y_log10() +
scale_fill_manual(values = response_colors) +
labs(title = "FPKM Expression by Sample", y = "FPKM (log10)", x = "Sample", fill = "Response") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, hjust = 1),
legend.position = "bottom")  # Show legend only here
# Combine plots vertically
combined_plot <- p1 / p2  # Uses patchwork syntax for vertical arrangement
# Save as PDF
pdf("D:/didic/Documents/Documentos/Master UOC/Cuatri 2/TFM/TPM_FPKM_Expression.pdf", width = 14, height = 10)
print(combined_plot)
dev.off()
library(ggplot2)
library(dplyr)
library(patchwork)  # For combining plots
# Define colors for responders and non-responders
response_colors <- c("responder" = "skyblue", "non_responder" = "lightcoral")
# TPM Expression by Sample (Without Legend)
p1 <- ggplot(rna_m6a_expression, aes(x = Sample, y = TPM, fill = response_TAC1)) +
geom_boxplot(alpha = 0.7, outlier.shape = NA) +
geom_jitter(width = 0.2, alpha = 0.5) +
scale_y_log10() +
scale_fill_manual(values = response_colors) +
labs(title = "TPM Expression by Sample", y = "TPM (log10)", x = "Sample") +
theme_minimal() +
theme(axis.text.x = element_blank(),  # Remove x-axis labels for top plot
axis.ticks.x = element_blank(),
legend.position = "none")  # Hide legend in first plot
# FPKM Expression by Sample (With Legend)
p2 <- ggplot(rna_m6a_expression, aes(x = Sample, y = FPKM, fill = response_TAC1)) +
geom_boxplot(alpha = 0.7, outlier.shape = NA) +
geom_jitter(width = 0.2, alpha = 0.5) +
scale_y_log10() +
scale_fill_manual(values = response_colors) +
labs(title = "FPKM Expression by Sample", y = "FPKM (log10)", x = "Sample", fill = "Response") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, hjust = 1),
legend.position = "bottom")  # Show legend only here
# Combine plots vertically
combined_plot <- p1 / p2  # Uses patchwork syntax for vertical arrangement
# Save as PDF
pdf("D:/didic/Documents/Documentos/Master UOC/Cuatri 2/TFM/TPM_FPKM_Expression.pdf", width = 14, height = 10)
print(combined_plot)
dev.off()
library(ggplot2)
library(dplyr)
library(patchwork)  # For combining plots
# Define colors for responders and non-responders
response_colors <- c("responder" = "skyblue", "non_responder" = "lightcoral")
# TPM Expression by Sample (Without Legend)
p1 <- ggplot(rna_m6a_expression, aes(x = Sample, y = TPM, fill = response_TAC1)) +
geom_boxplot(alpha = 0.7, outlier.shape = NA) +
geom_jitter(width = 0.2, alpha = 0.5) +
scale_y_log10() +
scale_fill_manual(values = response_colors) +
labs(title = "TPM Expression by Sample", y = "TPM (log10)", x = "Sample") +
theme_minimal() +
theme(axis.text.x = element_blank(),  # Remove x-axis labels for top plot
axis.ticks.x = element_blank(),
legend.position = "none")  # Hide legend in first plot
# FPKM Expression by Sample (With Legend)
p2 <- ggplot(rna_m6a_expression, aes(x = Sample, y = FPKM, fill = response_TAC1)) +
geom_boxplot(alpha = 0.7, outlier.shape = NA) +
geom_jitter(width = 0.2, alpha = 0.5) +
scale_y_log10() +
scale_fill_manual(values = response_colors) +
labs(title = "FPKM Expression by Sample", y = "FPKM (log10)", x = "Sample", fill = "Response") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, hjust = 1),
legend.position = "bottom")  # Show legend only here
# Combine plots vertically
combined_plot <- p1 | p2  # Uses patchwork syntax for vertical arrangement
# Save as PDF
pdf("D:/didic/Documents/Documentos/Master UOC/Cuatri 2/TFM/TPM_FPKM_Expression.pdf", width = 14, height = 10)
print(combined_plot)
dev.off()
knitr::opts_chunk$set(echo = TRUE)
BiocManager::install("ComplexHeatmap")
# Añadimos los datos clínicos
clinical_data_path <- "D:/didic/Documents/Documentos/Master UOC/Cuatri 2/TFM/20250228_DDBB_clinicos_RENAL_summarized.txt"
clinical_data <- fread(clinical_data_path, sep = "\t", header = TRUE)
library(maftools)
library(ggplot2)
#library(forcats)
#library(xlsx)
library(dplyr)
library(GenomicRanges)
library(tidyr)
# library(BSgenome.Hsapiens.UCSC.hg19)
#library(NMF)
library(patchwork)
library(pheatmap)
library(data.table)
# library(enrichR)
#library(paletteer)
library(stringr)
#library(vidger)
#library(ggpubr)
#library(scales)
#3library(tidyverse)
#library(gdata)
library(ComplexHeatmap)
library(circlize)
knitr::opts_chunk$set(echo = TRUE)
BiocManager::install("ComplexHeatmap")
library(maftools)
library(ggplot2)
#library(forcats)
#library(xlsx)
library(dplyr)
library(GenomicRanges)
library(tidyr)
# library(BSgenome.Hsapiens.UCSC.hg19)
#library(NMF)
library(patchwork)
library(pheatmap)
library(data.table)
# library(enrichR)
#library(paletteer)
library(stringr)
#library(vidger)
#library(ggpubr)
#library(scales)
#3library(tidyverse)
#library(gdata)
library(ComplexHeatmap)
library(circlize)
# Definir variantes no sinónimas
vc_nonsyn <- c("Targeted_Region", "Splice_Site", "Nonsense_Mutation",
"Frame_Shift_Del", "Frame_Shift_Ins", "Nonstop_Mutation",
"Translation_Start_Site", "In_Frame_Ins", "In_Frame_Del",
"Missense_Mutation", "Intron", "Splice_Region", "Silent",
"RNA", "5'UTR", "3'UTR", "IGR", "5'Flank", "3'Flank")
# Lista de archivos MAF
maf_files <- list.files(path = "D:/didic/Documents/Documentos/Master UOC/Cuatri 2/TFM/Mutect2_tumorOnly_variantCalling_hg38",
pattern = "\\.PASS_annotated\\.maf$", full.names = TRUE)
# Crear una lista para almacenar los datos MAF
maf_list <- list()
# Leer y almacenar cada archivo MAF
for (file in maf_files) {
print(paste("Procesando:", file))
maf_obj <- tryCatch({
read.maf(file, vc_nonSyn = vc_nonsyn)
}, error = function(e) {
message(paste("Error al leer:", file, "-", e$message))
return(NULL)
})
if (!is.null(maf_obj)) {
maf_data <- maf_obj@data
# Verificar que no haya pérdida de columnas
if (ncol(maf_data) > 0) {
maf_list[[file]] <- maf_data
}
}
}
stop
stop()
savehistory("D:/didic/Documents/Documentos/Master UOC/Cuatri 2/TFM/TFM Código/26-03.Rhistory")
